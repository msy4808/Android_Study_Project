Toast.makeText(getApplicationContext(), "버튼이 눌렸습니다!!!", Toast.LENGTH_LONG).show();

--> onClick 메서드에서 간단한 메세지를 띄우는 기능

Intent myIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://m.naver.com"));
        startActivity(myIntent);

Intent myIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("tel:010-0000-1111"));
        startActivity(myIntent);

--> 인텐트기능 : 전달한 값을 받아 해당 값에 맞는 동작을 하는 기능(다음에 더 자세한 설명나옴)

공간가중치 (flex라고 생각하면 편함)

android:layout_weight = "?"  <-- 사용법

HTML에서 flex처럼 해당 공간을 ?의 비율로 설정하여 공간을 할당해줌

뷰 크기 --> 각 단말별 해상도가 다르므로 dp 단위를 사용. 해상도에 비율에 따라 비슷하게 설정되는 장점이 있음

뷰의 위치는 절대값 X --> 과거에 사용되던 방법이지만 지금은 사용하지않음.

XML에서 화면을 구성하지않고 자바코드 상에서 구현가능

--자바코드안에 onCreate()메소드 안에서

LinearLayout mainLayout = new LinearLayout(this);  <-- 리니어레이아웃을 선언해줌
mainLayout.setOrientation(LinearLayout.VERTICAL); <-- 선언한 레이아웃에 방향을 설정해줌

LinearLayout.LayoutParams params = 
		new LinearLayout.LayoutParams(
		LinearLayout.LayoutParams.MATCH_PARENT,
		LinearLayout.LayoutParams.WRAP_CONTENT); <-- 레이아웃안에 추가될 뷰들에 설정할 파라미터 생성

Button btn1 = new Button(this); <-- 버튼 생성
btn1.setText("버튼1"); <-- 버튼에 텍스트 설정
btn1.setLayoutParams(params); <-- 설정한 파라미터를 버튼에 부여
mainLayout.addView(btn1); <-- 버튼을 레이아웃에 추가

setContentView(mainLayout); <-- 레이아웃을 화면에 설정



--프래그먼트

프래그먼트의 사용목적 --> 분할된 화면들을 독립적으로 구성하기 위해서, 분할된 화면드르이 상태를 관리하기 위해서


--메인 프래그먼트
public class MainFragment extends Fragment {
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        ViewGroup view = (ViewGroup) inflater.inflate(R.layout.main_fragment, container,false);
        Button btn1 = view.findViewById(R.id.main_btn);
        btn1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                MainActivity main = (MainActivity) getActivity();
                main.onChanged(0);
            }
        });
        return view;
    }
}

--메뉴 프래그먼트
public class MenuFragment extends Fragment {
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        ViewGroup view = (ViewGroup) inflater.inflate(R.layout.menu_fragment, container,false);

        Button btn = view.findViewById(R.id.menu_btn);
        btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                MainActivity main = (MainActivity) getActivity();
                main.onChanged(1);
            }
        });
        return view;
    }
}

--메인 액티비티
public class MainActivity extends AppCompatActivity {
    MainFragment main;
    MenuFragment menu;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        main = (MainFragment) getSupportFragmentManager().findFragmentById(R.id.main_f);
        menu = new MenuFragment();
    }
    public void onChanged(int index) {
        if(index == 0) {
            getSupportFragmentManager().beginTransaction().replace(R.id.container, menu).commit();
        } else if(index == 1) {
            getSupportFragmentManager().beginTransaction().replace(R.id.container,main).commit();
        }
    }
}

--메인 프래그먼트 XML
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <TextView
        android:id="@+id/textView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="메인 프래그먼트"
        android:textSize="30dp"
        android:layout_centerInParent="true"
        android:gravity="center"/>

    <Button
        android:id="@+id/main_btn"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerInParent="true"
        android:text="메뉴화면으로"
        android:textSize="30dp" />
</RelativeLayout>

--메뉴 프래그먼트 XML
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <TextView
        android:id="@+id/textView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_centerInParent="true"
        android:gravity="center"
        android:text="메뉴 프래그먼트"
        android:textSize="30dp" />

    <Button
        android:id="@+id/menu_btn"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="메인화면으로"
        android:textSize="30dp"
        android:layout_alignParentBottom="true" />
</RelativeLayout>

--메인액티비티 XML
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:id="@+id/container">

   <fragment
       android:id="@+id/main_f"
       android:layout_width="match_parent"
       android:layout_height="match_parent"
       android:name="moon.fragment_test.MainFragment"/>
</RelativeLayout>


안드로이드 수명주기

새로운 액티비티
onCreate();
onStart();
onResume();
	
	↓

실행
onPause(); 일시중지(다른 액티비티가 상위로 오게된다면 호출)
onResume(); 일시중지된 액티비티가 다시 실행될때 호출

	↓

중지
onStop(); 중지상태로 변경될때 자동으로 호출됨

	↓
실행
onRestart();
onStart();
onResume(); 중지상태에서 다시 실행상태로 변경될때 호출

	↓
소멸
onDestroy();



각각의 상태 메소드

onCreate() 
액티비티가 처음에 만들어졌을때 호출됨
화면에 보이는 뷰들의 일반적인 상태를 설정하는 부분
이전 상태가 저장되어 있는 경우에는 번들 객체를 참조하여 이전 상태 복원가능
이 메소드 다음에는 항상 onStart() 메소드가 호출됨


onStart()
액티비티가 화면에 보이기 바로 전에 호출됨
액티비티가 화면 상에 보이면 이 메소드 다음에 onResume() 메소드가 호출됨
액티비티가 화면에서 가려지게 되면 이 메소드 다음에 onStop() 메소드가 호출됨


onResume()
액티비티가 사용자와 상호작용하기 바로 전에 호출됨


onRestart()
액티비티가 중지된 이후에 호출되는 메소드로 다시 시작되기 바로 전에 호출됨
이 메소드 다음에는 항상 onStart() 메소드가 호출됨


onPause()
또 다른 액티비티를 시작하려고 할때 호출됨
저장되지 않은 데이터를 저장소에 저장하거나 애니메이션 중인 작업을 중지하는 등의 기능을 수행하는 메소드임
이 메소드가 리턴하기 전에는 다음 액티비티가 시작될수 없으므로 이 작업은 매우 빨리 수행된 후 리턴 되어야함
액티비티가 이 상태에 들어가면 시스템은 액티비티를 강제 종료 할 수있음


onStop()
액티비티가 사용자에게 더 이상 보이지 않을 때 호출됨
액티비티가 소멸되거나 또 다른 액티비티가 화면을 가릴 때 호출됨
액티비티가 이 상태에 들어가면 시스템은 액티비티를 강제 종료 할 수있음


onDestroy()
액티비티가 소멸되어 없어지기 전에 호출됨
이 메소드는 액티비티가 받는 마지막 호출이 됨
액티비티가 애플리케이션에 의해 종료되거나(finish() 메소드 호출) 시스템이 강제로 종료시키는 경우에 호출될수 있음
위의 두가지 경우를 구분할때 isFinishing() 메소드를 이용함
액티비티가 이 상태에 들어가면 시스템은 액티비티를 강제 종료 할 수있음


메인스레드에서만 UI를 그릴수있다
스레드간 통신은 기본적으로 핸들러를 통해 가능
핸들러로 handleMessage()메소드를 오버라이드하여 메세지 수신시 동작할 작업을 코딩한 후
sendMessage() 혹은 sendEmptyMessage()(두 메서드 다 핸들러를 상속받은 객체를 통해 사용)를 통해 메세지를 전달하면 해당 작업을 실행

또한 스레드를 생성하기위해 Thread클래스를 상속할 필요는 없음(스레드의 전체기능을 다 가져옴)
전체를 상속하는게 아닌 Runnable 인터페이스를 implements하여 사용하면 run()메소드 하나만 오버라이드하면 됨(run하나만 가져옴)
RUnnable 인터페이스는 run메소드 하나만을 가지고있음


서비스

안드로이드에서 백그라운드 작업을 위한 구성요소
액티비티는 사용자의게 직접 보여지는 화면을 구성하고
서비스는 그 뒤에서 안보이는 작업을 수행한다
예로 노래를 들으며 웹서핑이 가능하다거나
전화를 하면서 인터넷을 볼수있는 등의 일이 있다


서비스의 3가지 유형
 

1) 백그라운드
백그라운드는 이름 그대로 사용자에게 직접 보이지 않는 작업을 수행한다.

액티비티가 사용자에게 직접 보이는 화면이라면

서비스는 뒤에서 필요한 작업을 수행한다.

애플리케이션을 꺼도 백그라운드 서비스는 계속 수행할 수 있다.

 

2) 바인더
바인딩을 위한 서비스이다.

이름 그대로 여러 구성 요소(예를 들면 Acticity)를 서비스에 바인딩하여

서비스와 상호작용할 수 있다.

클라이언트-서버 유형과 비슷하다고 생각할 수 있다.

액티비티와 서비스는 따로 운영될 수 있지만

서로 바인딩하여 통신할 수도 있다.

bindService()를 호출하여 사용한다.

바인딩이 해제되면 해당 서비스는 소멸된다.

 

3) 포그라운드
서비스는 포그라운드로도 실행할 수 있다.

포그라운드는 이름 그대로 사용자에게 직접 보이는 작업을 수행한다.

오디오 앱을 예로 들면 트랙을 재생할 때 포그라운드 서비스를 사용한다.

포그라운드인데 왜 서비스냐? 사용자가 다른 앱을 사용중이어도 계속해서 실행되도록 하기 때문이다.

3. 서비스의 선언
 

서비스는 activity처럼 Manifest에서 선언해주어야 한다.

이때 application의 하위 요소로 선언해주면 된다.

 

<manifest>

   <application>

      <service android:name=".MyService"/>

   </application>

</manifest>

 

서비스는 다른 애플리케이션과도 상호작용할 수 있는데

Manifest에서 서비스를 비공개로 선언하고 다른 애플리케이션으로부터의 액세스를 차단할 수도 있다.

 

android:exported="false"를 추가하면

서비스를 본인의 앱에서만 사용 가능하게 할 수 있다.

android:description 특성을 추가해서 서비스에 대한 설명을 기재할 수도 있다.




4. 서비스의 기본 콜백 메소드
 

1) onStartCommand()
서비스를 시작하도록 요청하는 메소드이다.

서비스를 실행하려는 곳(예를 들면 Activity)에서 startService()를 써서 호출된다.

 

이 메소드가 실행되면 서비스가 시작되고 백그라운드에서 무한히 실행될 수 있다.

서비스를 중단하는 것은 stopSelf() 또는 stopService()를 써서 호출하면 된다.

 

바인딩만 제공하고자 하는 경우에는 onStartCommand()를 구현하지 않아도 된다.

 

 

2) onBind()
다른 구성 요소와 서비스를 바인딩하려는 경우에 호출한다.

바인딩을 실행하려는 곳(예를 들면 Activity)에서 bindService()를 써서 호출된다.

 

구현을 할 때는 Interface를 제공해야 한다.

return으로 IBinder를 반환하면 된다.

 

이 메소드는 항상 구현해야 한다.

구현을 하는데 바인딩을 하지 않으면 return값으로 null을 반환하면 된다.

 

 

3) onCreate()
onStartCommand() 또는 onBind()를 호출하기 전에 호출한다.

 

onStartComannd() 또는 onBind()에서 서비스를 실행하거나 바인딩을 하고 나면

서비스가 계속해서 실행되고 있는 중이 되기 때문에

일회성으로 실행되며, 서비스가 이미 실행 중이면 onCreate()는 호출되지 않는다.

 

 

4) ondestroy()
서비스를 소멸시킬 때 호출한다.

각종 리소스를 정리하기 위해 구현해야 한다.

 

 

 

 

 

5. 서비스의 호출과 소멸
 

1) startService() 서비스 호출
한 구성 요소(예를 들면 Activity)에서

startService()를 써서 서비스를 호출하면

onStartCommand()가 호출되고

서비스가 중단되기 전까지는 서비스를 실행중인 상태로 유지한다.

 

서비스를 중단하는 방법은

stopSelf()로 스스로 중단하거나,

다른 구성 요소(예를 들면 Activity)에서 stopService()를 써서 호출할 수 있다.

 

 

2) bindService() 바인딩 호출
한 구성 요소(예를 들면 Activity)에서

bindService()를 써서 서비스를 호출하면

해당 서비스는 해당 구성 요소가 바인딩된 경우에만 실행된다.

서비스가 모든 바인딩이 해제되면 시스템에 의해 소멸된다.

 

 

3) 서비스 소멸
안드로이드 시스템이 서비스를 강제로 소멸하는 경우는,

메모리 부족으로 인해 리소스를 정리하는 경우에 국한된다.

 

서비스가 강제로 소멸할 가능성은 다음과 같다.

- 서비스가 포그라운드에서 실행되는 경우 -> 소멸 가능성 희박함

- 서비스가 바인딩된 경우 -> 소멸 가능성 적음

- 서비스가 백그라운드에서 장시간 실행 중 -> 소멸 가능성 높음

 

 

4) 서비스 소멸 후 재시작
서비스가 시스템에 의해 소멸된 경우,

서비스가 다시 시작할 여부는

onStartCommand()의 return값에 따라 달라질 수 있다.

 

onStartComman()는 3가지 반환 값을 가질 수 있다.

 

(1) START_REDELIVER_INTENT
시스템이 서비스를 중단하면 서비스를 다시 생성한다.

그리고 이 서비스에 전달된 마지막 인텐트로 onStartCommand()를 호출한다.

모든 보류 인텐트가 차례로 전달된다.

파일 다운로드와 같은 서비스에 적합하다.

 

(2) START_STICKY
시스템이 서비스를 중단하면 서비스를 다시 생성한다.

마지막 인텐트를 전달하지 않고 null 인텐트로 onStartcommand()를 호출한다.

명령을 실행하진 않지만 작업을 기다리는 미디어 플레이어와 같은 서비스에 적합하다.

 

(3) START_NOT_STICKY
시스템이 서비스를 중단하면 서비스를 재생성하지 않는다.

다시 시작하려는 경우에 적합하다.

public class MyService extends Service {
 
    @Override // 서비스가 최초 생성될 때만 호출
    public void onCreate() {
    }
 
    @Override // startService()로 서비스를 시작할 때 호출
    public int onStartCommand(Intent intent, int flags, int startId) { 
 
        return START_STICKY;
    }
 
    @Override // bindService()로 바인딩을 실행할 때 호출
    public IBinder onBind(Intent intent) {
 
        return mBinder;
    }
 
    @Override // unbindService()로 바인딩을 해제할 때 호출
    public boolean onUnbind(Intent intent) {
 
        return mAllowRebind;
    }
 
    @Override // 이미 onUnbind()가 호출된 후에 bindService()로 바인딩을 실행할 때 호출
    public void onRebind(Intent intent) {
 
    }
 
    @Override // 서비스가 소멸될 때 호출
    public void onDestroy() {
 
    }
 
}


8. 서비스의 시작과 중단
 

1) 서비스의 시작
서비스는 다른 구성 요소(예를 들어 Activity)에서

startService()를 써서 서비스의 onStartCommand()를 호출하면서 시작된다.

호출할 때는 Intent를 전달하는데, 예를 들어 다음과 같이 호출할 수 있다.

 

startService(new Intent(getApplicationContext(), MyService.class));

 

이 호출을 서비스의 onStartcommand()에서 받는다.

 

서비스가 시작되면 이를 호출한 구성 요소와 독립적인 수명 주기를 가진다.

즉 서비스는 백그라운드에서 무한히 실행될 수 있고,

서비스를 호출한 구성 요소가 소멸되어도 계속 실행될 수 있다.

 

 

2) 서비스의 중단
서비스는 수명 주기(LifeCycle)를 직접 관리해야 한다.

즉, 시스템은 기본적으로는 서비스를 중단이나 소멸시키지 않는다.

stopSelf()로 스스로 중지하거나,

다른 구성 요소(예를 들어 Activity)에서 stopService()를 써서 소멸시킬 수 있다.

 

stopService(new Intent(getApplicationContext(), MyService.class));

 

 

 

3) 액티비티 내에서만 실행 및 중단하는 법
서비스를 액티비티가 실행중인 동안에만 작동하도록 하려면

액티비티의 onCreate()에서 서비스를 생성하고

onStart()에서 서비스스를 실행하고

onStop()에서 서비스를 중단하면 된다.


9. 바인딩 서비스 생성

바인딩된 서비스는 bindService()를 호출하여

다른 구성 요소를 서비스에 바인딩할 수 있다.

 

바인딩된 서비스를 생성하려면 onBind() 콜백 메소드를 구현하여

서비스와의 통신을 위한 Interface를 정의하는 IBinder를 return해야 한다.

그렇게 하면 다른 구성 요소가 bindService()를 호출하여 

해당 Interface를 검색하고 서비스에 있는 메소드를 호출할 수 있다.

 

서비스는 바인딩된 구성 요소를 돕기 위해 존재하는 것이기 때문에

구성 요소가 소멸되면 시스템이 서비스도 소멸시킨다.

그래서 바인딩된 서비스는 기본적으로 직접 중단하지 않아도 된다.

 

여러 구성 요소가 한 서비스에 바인딩될 수 있다.

구성 요소는 unbindService()를 호출하여 서비스에 바인딩을 해제할 수 있고

서비스에 바인딩된 구성 요소가 하나도 남지 않게 되면

서비스가 서비스를 소멸시킨다.



안드로이드의 4대 구성요소(컴포넌트)

-액티비티
-서비스
-브로그캐스트 리시버
-컨텐트 프로바이더

이 각각의 컴포넌트간의 통신을 맡는 것이 Intent이다

Intent의 통신 방법은 두가지

-명시적 Intent
-암시적 Intent

명시적 Intent

-명시적 Intent는 가장 많이 보는 방법입니다. 앱의 화면 전환을 할때 사용

Intent intent = new Intent(A_Activity.this, B_Activity.class);
startActivity(intent);

현재 액티비티(A)에서 다른 액티비티(B)를 호출할 때 사용됩니다

물론 이런 방식으로 사용하기위해선 매니패스트에서 액티비티를 정의를 해주어야 함

<activity android:name=".B_Activity">    <-- 매니패스트에서 액티비티 정의하는 법

또한 Intent에서 액티비티를 호출할 때 데이터를 전달 또는 리턴 받을 수 있음

-A에서 B로 데이터를 전달시

Intent intent = new Intent(A_Activity.this, B_Activity.class);
intent.putExtra("kay", "데이터 11111");  <-- 전달할 데이터를 kay / value 형식으로 Intent에 저장함
startActivity(intent);

이렇게 B로 데이터를 전달하면 B에서 받을수 있음

Intent b_Intent = getIntent();  <-- Intent를 getIntent() 로 가져옴

String value = b_Intent.getStringExtra("kay");  <-- A에서 전달할때 지정한 key값으로 데이터를 가져옴

-A에서 startActivityForResult() 메소드로 B를 호출하고 B에서 onActivityResult() 로 리턴값을 받을수 있음

Intent intent = new Intent(A_Activity.this, B_Activity.class);
startActivityForResult(intent, 100);  <-- B를 호출 시 100이란 값을 넘겨줌


-B_Activity.class

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    switch (requestCode){   
        case 100:   <-- A에서 받은 값이 100이라면 case문 실행
            if(data.getExtras() != null){
                String str = data.getStringExtra("resultKey");
                result01.setText("startAcitivtyForResult() 리턴값 받기: " + str);
            }
            break;
    }
    super.onActivityResult(requestCode, resultCode, data);
}


암시적 Intent

-암시적 Intent는 Intent의 Action에 따라 해당하는 적합한 애플리케이션의 클래스를 호출함.
-이때 하나가 아니라 여러 개가 호출이 될 수있음
-암시적 Intent는 웹브라우저의 호출, 이메일 전송, 전화앱으로 통화 등등이 있음


-웹브라우저 Intent 호출

Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://m.naver.com"));
startActivity(intent);   <-- 웹브라우저가 열리며 naver.com으로 이동


-이메일 전달 Intent 호출

Intent intent = new Intent(Intent.ACTION_SEND);
intent.setType("text/plain");
intent.putExtra(Intent.EXTRA_EMAIL, "sampleXXX@sampleXXX.com");
intent.putExtra(Intent.EXTRA_SUBJECT, "전달할 이메일 제목");
intent.putExtra(Intent.EXTRA_TEXT, "전달할 내용");
startActivity(Intent.createChooser(intent, "Choose Email"));


-전화 Intent 호출

Intent intent = new Intent(Intent.ACTION_VIEW,Uri.parse("tel:010-0000-0000"));
startActivity(intent);



Context

공식설명
-Android 애플리케이션 환경에 대한 글로벌 정보를 갖는 인터페이스입니다. Context는 Android 시스템에서 구현체를 제공해주는 추상 클래스로, 애플리케이션 별 리소스 및 클래스 접근에 사용되며, 액티비티 실행, 브로드캐스트, 인탠트 수신 등과 같은 애플리케이션 수준 작업에 사용됩니다.

-애플리케이션의 현재 상태를 나타낸다.
-액티비티와 애플리케이션의 정보를 얻기 위해 사용할 수 있다.
-리소스, 데이터베이스, SharedPreference 등에 접근하기 위해 사용할 수 있다.
-액티비티와 애플리케이션 클래스는 Context 클래스를 확장한 클래스이다.


Context의 종류

-Application Context
-Activity Context


Application Context

-Application Context는 싱글턴 인스턴스이며, 액티비티에서 getApplicationContext() 를 통해 접근할수 있다. 이 Context는 애플리케이션 라이프사이클에 묶여있으며, 현재 Context가 종료된 이후에도 Context가 필요한 작업이나 액티비티 스코프를 벗어난 Context가 필요한 작업에 적합합니다.

-예를 들어, 애플리케이션에 싱글턴 오브젝트를 생성하고. 해당 오브젝트가 Context가 필요하다면 항상 Application Context를 전달해야함. 만약 Activity Context를 전달한다면, 해당 오브젝트가 액티비티를 항상 참조하므로, 액티비티가 화면에 표시되지 않는 순간에도 가비지 콜렉션이 진행되지 않아 메모리 누수가 발생함

-애플리케이션 전체에서 사용할 라이브러리를 특정 액티비티에서 초기화한다면 어떤 Context를 전달해야하나?
=당연히 Application Context입니다. getApplicationContext()는 딱 위와 같은 경우에만 사용하여야 합니다.

Activity Context

-Activity Context는 액티비티 내에서 유효한 Context 임. 이 Context는 액티비티 라이프사이클과 연결되어 있음. Activity Context는 액티비티와 함께 소멸해야 하는 경우에 사용함.

-예를 들어, 액티비티와 라이프사이클이 같은 오브젝트를 생성해야 할 때 Activity Context를 사용할 수 있음.

앱의 계층 구조는 MyApplication 안에 MainActivity1 과 MainActivity2가 있음

-Application Context는 MyApplication, MainActivity1, MainActivity2 모두에서 사용할 수 있습니다.

-MainActivity1의 Context는 MainActivity1에서만 사용할 수 있습니다.

-MainActivity2의 Context는 MainActivity2에서만 사용할 수 있습니다.


ContentProvider의 getContext()

추상클래스 ContentProvider를 상속한 클래스에서 getContext() 메소드를 통해 불러올 수 있는 Context는 Application Context 임.


언제, 어떤 Context를 사용해야 할까?

상황을 가정하여 언제, 어떤 Context를 사용할 지 알아봅시다. class MyApplication과 class MyDB 싱글턴이 있다고 가정해봅시다. 그리고 MyDB가 context가 필요한 상황이라면, 어떤 context가 필요할까요?

답은 Application Context입니다. 만약 우리가 Activity의 Context를 전달했다면, 액티비티가 사용되지 않는 경우에도 MyDB가 불필요하게 액티비티를 참조하고, 메모리 누수가 발생할 것입니다. 그러므로 싱글턴의 경우에는 항상 애플리케이션 컨택스트를 전달하는 게 맞습니다.

그렇다면 언제 액티비티 컨택스트를 사용해야 할까요? 언제든 액티비티를 사용할 때, Toast, Dialog 등의 UI operation에서 컨택스트가 필요하다면 이때 액티비티 컨택스트를 사용해야 합니다.

항상 가능한 한 가까운 컨택스트를 사용하도록 합시다. 액티비티에 있다면, 액티비티 컨택스트를, 애플리케이션에 있다면, 애플리케이션 컨택스트를 사용합니다. 싱글턴의 경우에는 애플리케이션 컨택스트를 사용합니다.


getApplicationContext()를 쓰면 안 되는 경우

Application Context는 Activity Context가 제공하는 기능 전체를 제공하진 않습니다. 특히 GUI와 관련된 컨택스트 조작은 실패할 확률이 높습니다.
Application Context가 사용자 호출로 생성된, clean up 되지 않은 객체를 가지고 있다면 메모리 누수가 발생할 수 있습니다. Activity 객체는 가비지 콜렉션이 가능하지만 Application 오브젝트는 프로세스가 살아있는 동안 남아있습니다.


Rule of Thumb

대부분의 경우 가장 가까운, 스코프에 해당하는 컨택스트를 직접 사용하세요. 참조가 해당 컴포넌트의 라이프사이클을 넘어서지 않는 이상 메모리 누수 걱정 없이 컴포넌트를 유지할 수 있습니다. 액티비티나 서비스 이외의 객체에서 컨택스트를 참조해야 하는 경우 액티비티 컨택스트가 아닌, 애플리케이션 컨텍스트로 전환하세요.


싱글톤 패턴이란(싱글턴)

-해당 클래스에 한 개의 인스턴스만을 갖게하고 전역범위에서 이 인스턴스에 접근할 수 있도록 사용하는 패턴임.    <-- 전역변수랑 비슷

-예들 들어, DB에 접근하려면 DBCP(DataBase Connection Pool)을 생성해서 접근해야하는데 여러 개의 클래서에서 DB에 접근을 해야하는 경우 각 클래스에서 계속 DBCP객체를 생성한다면 쓸데없는 메모리의 낭비

-그래서 한개의 DBCP객체를 여러 개의 클래스가 공유해서 사용하는 방법이 싱글톤 패턴(싱클턴)이라고 함

의문 1

-“???:그럼 전역변수로 선언해서 사용하면 되지 않나요?”

-싱글톤 패턴과 마찬가지로 전역변수를 만들어서 사용하면 언제든지 인스턴스에 접근할 수 있음.

-하지만 해당 전역변수를 소프트웨어가 실행되는 동안 전역변수를 사용하지 않게 되면 메모리 자원은 낭비될 수 밖에 없습니다.  <-- 즉, 사용이 되지않는 경우에도 메모리에서 차지함


싱클톤 패턴의 장단점

-장점

-한번의 객체 생성으로 여러 클래스가 공유할 수 있기 때문에 메모리 낭비를 방지할 수 있으며, 다른 객체와 공유할 수 있다는 장점

-또한 두번째 호출부터는 객체 로딩 시간이 줄어들어 성능이 향상된다는 장점

-단점

-많은 개발자들이 "싱글톤을 남용하면 쓸데없이 자원을 자치하고, GC(Garbage Collector)이 자원을 회수하지 못해 메모리 자원이 줄어든다."라고 이야기 함

-또한 싱글톤 클래스에 과도한 데이터를 집어넣고 여러 클래스들이 공유하게 될 경우 결합도(Coupling)는 높아지게 되고, 객체지향의 원칙인 "개방-폐쇄의 원칙"을 위배하게 됨. 결합도가 높아진 싱글톤은 단위 테스트에도 굉장히 좋지 않음

-언제 사용하는가

-여러 객체를 관리하는 역할의 객체를 하나의 인스턴스로 생성 후 사용하는 것이 좋음

-예를 들어, Connection Pool, Logging, Thread Pool 등을 여러 곳에서 열람해야 하느 경우 사용하면 좋음


Garbage Collection (GC)

-Java는 GC를 이용해 메모리를 관리함

-필요에 따라 GC가 실행되고, 그 과정에서 사용하지 않는 객체들을 정리해줌



1. 자바에서는 Garbage Collection(또는 GC)를 이용하여 메모리를 정리한다.

1-1. GC는 더이상 사용되지 않는 쓰레기 객체들을 정리하는 작업을 한다.

1-2. GC는 필요에 따라 자동으로 실행된다. (2-2의 경우에 실행된다.)

 

2. GC에 의해 관리되는 메모리는 Young과 Old로 나뉜다.

2-1. Young은 3단계로 다시 나뉜다. (Eden, Survivor 1, Survivor 2)

2-2. 객체가 GC에 의해 정리되지 않고 오래 살아남을수록 Eden -> Survivor 1 -> Survivor 2 -> Old로 이동된다.

2-2. 각 메모리 영역에 할당된 메모리가 적정 수치를 넘었을 때 GC가 실행된다.

 

3. GC는 Mark & Sweep 방식으로 동작한다.

3-1. GC가 실행되면, 아래와 같이 외부에서 접근할 수 있는 객체들을 GC Root로 설정한다.

- 실행 중인 쓰레드 (Active Thread)

- 정적 변수 (Static Variable)

- 로컬 변수 (Local Variable)

- JNI 레퍼런스 (JNI Reference)

3-2. GC Root에서 출발하여, 참조되고 있는 변수들을 순차적으로 Mark한다. (Mark)

3-3. Mark되지 않은 객체들은 쓰레기 객체로 판정하고 정리한다. (Sweep)

 

4. GC가 발생하는 동안은 stop-the-world 상태가 된다.
4-1. 객체 참조를 정확히 판단해야 하기 때문에, GC 과정에서 참조가 변경되면 안 된다.

4-2. 참조를 유지하기 위해 GC 실행시간 동안은 모든 작업이 멈춘다. (stop-the-world)



브로드캐스트 리시버 (BroadCast Receiver)

-android 앱은 android 시스템 및 기타 android 앱에서 게시-구독 디자인 패턴과 유사한 브로드캐스트 메세지를 받거나 보낼 수 있음.

-관심 있는 이벤트가 발생할 때 이러한 브로드캐스트가 전송됨.

- 예를 들어, android 시스템은 시스템 부팅 또는 기기 충전 시작과 같은 다양한 시스템 이벤트가 발생할 때 브로드캐스트를 전송함. 

- 또한 앱은 맞춤 브로드캐스트를 전송하여 다른 앱이 관심을 가질만한 사항(일부 새로운 데이터가 다운로드 됨...등등)을 관련 앱에 알릴 수 있음.

-앱은 특정 브로드캐스트를 수신하도록 등록가능. 브로드캐스트가 전송되면 시스템은 특정 유형의 브로드캐스트를 수신하도록 신청한 앱에 브로드캐스트를 자동으로 라우팅함.

- 일반적으로 브로드캐스트는 앱 전체와 일반 사용자 플로우 외부에서 메시징 시스템으로 사용될 수 있음.

- 전원 충전, 전원 충전 해제, 비행기 모드 돌입, 애플리케이션 설치 완료 등의 다양한 이벤트들이 브로드캐스트에 해당.


-대표적인 브로드캐스트들-

ACTION_BOOT_COMPLETED
- 부팅이 끝났을 때 (RECEIVE_BOOT_COMPLETED 권한 등록 필요)

ACTION_CAMERA_BUTTON
- 카메라 버튼이 눌렸을 때

ACTION_DATE_CHANGED
ACTION_TIME_CHANGED
- 폰의 날짜, 시간이 수동으로 변했을 때 (설정에서 수정했을 때)

ACTION_SCREEN_OFF
ACTION_SCREEN_ON
- 화면 on, off

ACTION_AIRPLANE_MODE_CHANGED
- 비행기 모드

ACTION_BATTERY_CHANGED
ACTION_BATTERY_LOW
ACTION_BATTERY_OKAY
- 배터리 상태변화

ACTION_PACKAGE_ADDED
ACTION_PACKAGE_CHANGED
ACTION_PACKAGE_DATA_CLEARED
ACTION_PACKAGE_INSTALL
ACTION_PACKAGE_REMOVED
ACTION_PACKAGE_REPLACED
ACTION_PACKAGE_RESTARTED
- 어플 설치/제거

ACTION_POWER_CONNECTED
ACTION_POWER_DISCONNECTED
- 충전 관련

ACTION_REBOOT
ACTION_SHUTDOWN
- 재부팅/종료

ACTION_TIME_TICK
- 매분마다 수신

android.provider.Telephony.SMS_RECEIVED
- sms 수신 (RECEIVE_SMS 권한 필요)


사용법

- 브로드캐스트리시버를 상속받은 클래스를 생성(.java파일)후 onReceive 메서드를 정의해줌

// 전원연결 및 전원해제 시 Toast메시지를 띄운다
public void onReceive(Context context, Intent intent) { 
 	if(Intent.ACTION_POWER_CONNECTED.equals(intent.getAction())) {
		 Toast.makeText(context, "전원 연결", Toast.LENGTH_SHORT).show();
	 } else if(Intent.ACTION_POWER_DISCONNECTED.equals(intent.getAction())) { 
		 Toast.makeText(context, "전원 연결 해제", Toast.LENGTH_SHORT).show(); 
	}
 }


- 또한 매니패스트에 정의를 해줘야 사용가능



<!-- 브로드캐스트 리시버 정의 --> 
<receiver 
	android:name=".broadCastRece"  //클래스 이름
	android:enabled="true" 
	android:exported="true"> 
	<intent-filter> 
	//사용 할 이벤트들
	<action android:name="android.intent.action.ACTION_POWER_CONNECTED" /> 
	<action android:name="android.intent.action.ACTION_POWER_DISCONNECTED" /> 
	</intent-filter> 
</receiver>


MainActivity.java 에서 호출

public class MainActivity extends AppCompatActivity {
    private BroadcastReceiver mReceiver; //리시버 선언
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mReceiver = new BroadCast(); //생성한 BroadCast 클래스를 브로드캐스트 리시버로 정의
    }

    @Override
    protected void onResume() {
        super.onResume();

        IntentFilter filter = new IntentFilter(); //특정 액션만(충전, 충전해제) 받을 수 있게 필터정의
        filter.addAction(Intent.ACTION_POWER_CONNECTED);
        filter.addAction(Intent.ACTION_POWER_DISCONNECTED);
        registerReceiver(mReceiver, filter); //레지스트리로 리시버와 필터 지정
    }

    @Override
    protected void onPause() {
        super.onPause();
        unregisterReceiver(mReceiver); //앱이 일시정지되면 리시버 삭제
    }
}


컨텐트 프로바이더 (Content Provider)

- 컨텐트 프로바이더는 앱 간의 데이터 공유를 위해 사용됨. 

- 특정 앱이 다른 앱의 데이터를 직접 접근해서 사용할 수 없기 때문에 필수적으로 사용해야함.


A APP 					B APP

-Local DB  <-> Content Provider <----->  Content Resolver


- 다른 앱의 데이터를 사용하고자 하는 앱에서는 URI를 이용하여 컨텐트 리졸버 (Content Resolver) 를 통해 다른 앱의 컨텐트 프로바이더에게 데이터를 요청하게 되는데 요청받은 컨텐트 프로바이더는 URI를 확인하고 내부에서 데이터를 꺼내어 컨텐트 리졸버에게 전달함.


컨텐트 프로바이저 클래스와 URI 구조

- 앱에서 데이터 공유를 제공하기 위해서는 Content Provider 클래스를 상속받는 클래스를 먼저 생성.

- 자동으로 onCreate(), query(), insert(), delete(), update() 함수가 만들어지는데, 데이터베이스와 유사

- onCreate() 에서 데이터베이스를 생성(DBHandler)하고, query() 에서 데이터 조회, insert() 에서 데이터 추가, delete() 에서 데이터 삭제, update() 에서 데이터 수정을 함.

- 앱과 이 기능들을 구분하기 위해 컨텐트 프로바이더는 URI를 가지는데 구조는 다음과 같음

PREFIX(content)://AUTHORITY(패키지명)/PATH/ID

ex) content://com.test.contentprovider/path/id

Prefix : 컨텐트 프로바이더를 사용한다는 것을 나타내는 고정적인 스키마

Authority : 컨텐트 프로바이더를 구분, 사용하려면 매니패스트 파일에서 <provider> 엘리먼트에 authority 속성과 동일한 내용을 추가해야함. 보통 패키지명을 사용함.

Path : 데이터의 경로, 데이터베이스 같은 경우 DB 테이블을 의미

Id : Path 안의 특정 레코드를 참조할 경우 사용



Android 기본개념

- Manifest
- 안드로이드 시스템이 앱의 코드를 실행하기 전에 확보해야 하는 앱에 대한 필수 정보를 시스템에 제공하는 목록

- 앱의 패키지 이름
- 앱에서 사용되는 컴포넌트(4대 요소 : 액티비티, 서비스, 브로드캐스트 리시버, 컨텐트 프로바이더)
- 권한 (Permission)    <-- 아래에서 추가로 다룰예정
- 앱에서 요구하는 하드웨어와 소프트웨어 특징 (SDK 같은거..?)

1. Package name and Application ID
- 매니페스트 파일의 Root element()에는 해당 패키지 네임이 반드시 기재되어있어야함

"com.ready.example" 이라는 패키지 네임의 manifest 파일

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.ready.example"
    android:versionCode="1"
    android:versionName="1.0" >
    ...
</manifest>

- 여기서 manifest의 패키지 네임은 우리가 앱을 빌드하여 APK 를 추출하는 과정에서 Android Build Tool 에 의해 다음 2가지 목적으로 사용됩니다.

- App Resource 에 접근하는데 사용되는 R 클래스의 네임스페이스로 적용됩니다. 위 예에서는 com.ready.example.R 클래스가 생성됩니다.

- 매니페스트 파일 내에서 선언된 상대경로에 적용됩니다.
예를 들어 \<activity android:name=".MainActivity> 라고 선언했다면 이는 "com.ready.example.MainActivity" 를 가리키게 됩니다.


2. App Components

- 4대 컴포넌트(액티비티, 서비스, 브로드캐스트 리시버, 컨텐트 프로바이버)를 앱에서 사용하려면 매니패스트 파일에 등록을 해줘야함. 각각의 태그로 선언가능

- <activity> : Activity
- <service> : Service
- <receiver> : Broadcast Receiver
- <provider> : Content Provider

- 4대 컴포넌트들은 각각 인텐트에 의해 활성화됨

- 앱이 인텐트를 시스템에 발행하면 시스템은 각 앱의 매니페스트에 선언된 intent-filter 에 기초하여 처리할 수 있는 인텐트를 컴포넌트를 찾게 됩니다. 만약 여러 개의 앱이 인텐트를 다룰 수 있다면, 사용자가 해당 인텐트를 어떤 앱에게 넘길지 선택할 수 있습니다.


3. Permissions

- 안드로이드 앱은 민감한 유저 정보나 카메라, 인터넷등 특정 기능을 사용할 때 반드시 권한을 요청해야함

예시) SMS 전송에 대한 권한 요청
<manifest ... >
    <uses-permission android:name="android.permission.SEND_SMS"/>
    ...
</manifest>


4. Device Compatibility (적합성)

- 매니패스트 파일에는 앱이 필요로 하는 하드웨어나 소프트웨어 특징을 명시할 수 있음.
- 예로, 카메라 앱을 만들 경우에 카메라가 필수로 있어야 하기에 카메라가 있는 기기에서만
다운로드가 가능하도록 명시함

예시) compass sensor가 있는 기기에서만 다운로드 가능하게 하기위함
<manifest ... >
    <uses-feature android:name="android.hardware.sensor.compass"
                  android:required="true" />
    ...
</manifest>


Gradle

- 빌드 배포 도구
- 앱의 빌드는 모두 Gradle를 통해 수행됨

build.gradle

- 모듈의 빌드 방법이 정의된 빌드스크립트로 빌드에 사용할 SDK 버전부터 APP 버전, 사용하는 라이브러리등 항목들을 설정가능

build.gradle 기본적인 항목들

- apply plugin: 'com.android.application'
- 안드로이드 플러그인 사용을 gradle에 적용하는 것이다.
(top-level선언)

- android {...}
안드로이드와 관련된 빌드 설정

- compileSdkVersion, buildToolsVersion
각각 앱 컴파일시 사용할 SDK 버전을 지정하고, 사용할 빌드툴의 버전을 지정하는 부분

- defaultConfig{...}
AndroidManifest.xml에서 사용하는 설정들에 대해서 동적인 옵션을 주고 싶을 때 이 블록내에 포함시킨다.
(versionCode, versionName등의 값을 이곳에서 설정)

- buildTypes{...}
dev, alpha, beta, release 같이 빌드 타입 종류를 지정

- dependencies{...}
라이브러리와 같은 의존성 추가 시 이곳에 작성


네트워킹

- 사용하는 이유 : 데이터를 주고 받는 과정이 상당히 복잡함. 하지만 인터넷에 연결되어 있는 여러 단말을 동시에 사용할 수 있어서 다양한 데이터 자원을 효율적으로 사용할 수 있기 때문에 사용.

네트워킹 방식들

1. 2-tier C/S (Client/Server) 방식

- 클라이언트와 서버가 1:1로 연결하는 방식

- 대부분 클라이언트가 서버에 연결되어 데이터를 요청(Request)하고 서버가 응답(Response)을 하는 단순한 개념으로 가장 많이 사용하는 네트워킹 방식

- 웹 페이지를 볼 때 사용하는 HTTP프로토콜, 파일 전송을 위한 FTP프로토콜, 메일을 주고 받는 POP3프로토콜 등의 연결방식

2. 3-tier 연결방식

- 클라이언트 - 응용서버 - 데이터 서버로 구성하여 좀더 유연하게 구성하는 방식

- 응용서버와 데이터 서버로 서버를 구축하면 데이터베이스를 분리할 수 있어 중가에 비즈니스 로직을 처리하는 응용 서버가 좀 더 다양한 역할을 할 수 있음.

- 클라이언트가 응용 서버로 요청(Request)을 하고 응용서버가 데이터 서버로 데이터 요청(Request)을 하면 데이터 버서에서 응용서버로 데이터 응답(Response)를 하고 응용서버가 클라이언트로 응답을 함

그 외의 네트워크 방식

- N-tier 연결 방식이 있지만 일반적으론 위에 2가지만 이해해도 크게 문제는 없음

- 단말 간의 통신이 일반화되며 클라이언트와 서버의 관계는 피어 투 피어(Peer-to-Peer)통신으로 불리는 P2P 모델로 변형되어 사용되기도 함

	- P2P 모델은 서버를 두지 않고 단말끼리 서버와 클라이언트 역할을 함
	- 정보 검색이나 파일 송수신으로 정보를 공유하는데 많이 사용됨
	- 메신저 서비스나 인터넷 전화에 사용되는 SIP 프로토콜 기반의 서비스들은 서버가 있긴 하지	  	  만 P2P 모델 특성을 가지고 있음


디자인 패턴

- 사전적 정의(위키 피디아)  : 소프트웨어 디자인 패턴은 소프트웨어 공학에서 소프트웨어 디자인에서 특정 문맥에서 공톡적으로 발생하는 무네에 대해 재사용 가능한 해결책. 소스나 기계 코드로 바로 전환될 수 있는 완성된 디자인은 아니며, 다른 상황에 맞게 사용될수 있는 문제들을 해결하는데에 쓰이는 서술이나 템플릿. 디자인 패턴은 프로그래머가 어플리케이션이나 시스템을 디자인할 때 공톡된 문제들을 해결하는데에 쓰이는 형식화된 가장 좋은 관행.

- 즉, 개발을 하다 자주 발생되어 반복되는 공통적인 문제들을 해결해야하는 경우가 많은데 이럴때 사용되는 패턴(템플릿으로 양식이 정해져 있고 개발자가 그 양식을 기반으로 조금씩 용도에 맞게 코드를 작성함).

- 사용하는 이유 : 코딩하며 겪는 문제를 보다 편하게 해결하기 위함도 있지만 보통 개발은 혼자가 아닌 팀으로 하는 경우가 많은데 이 경우 많은 사람들이 이해하는 코드를 짜야하는데 그 경우 이런 디자인 패턴이 사용되면 유지보수가 훨씬 편해지고 코드가 직관적이기 때문에.


소켓 (Socket)

- IP 주소로 목적지 호스트를 찾아내고 포트로 통신 접속점을 찾아내는 소켓 연결
- TCP 와 UDP 방식으로 나눌수 있는데 일반적으로 TCP를 많이 사용함.

- TCP 와 UDP의 차이는 간단하게 데이터를 보내고 검증, 검수를 하냐 안하냐의 차이라고 볼 수 있음.

HTTP 프로토콜과 소켓

- HTTP 프로토콜은 소켓으로 웹서버에 연결한 후에 요청을 전송하고 응답을 받은 다음 연결을 끊음
	-> 비연결성 (stateless)


※ Android는 소켓 연결 등을 시도하거나 응답을 받아 처리할 때 스레드를 사용해야 함!!!!!!!!!!
	이전에는 권장사항이고 필수는 아니였지만 지금은 강제사항으로 됨. 스레드를 사용하지 않으면
	네트워킹 기능 자체가 동작하지 않음!




코틀린

코틀린의 변수 선언 방식

- 코틀린은 변수를 자바와 다르게 타입추론을 하여 선언하기에 자료형을 따로 선언할 필요 X

- val 과 var 두가지의 선언 키워드가 존재하며 이 두 가지가 필요한 이유는 위에처럼 타입추론과 변수의 불변성을 보장하기 위해서

- var 방식은 기존의 선언과 같지만 val 키워드는 자바의 final 키워드로 선언한 변수와 같이 상수로써 취급되어 처음의 초기화한 값에서 더이상 변하지 않고 변할수도 없는 변수가 됨



val 

- 변경 불가능한 참조를 저장하는 변수로서, 특정한 값을 의미하는 'Value'를 나타냄
- val로 선언하면 초기화 이후 '변수의 재 대입'이 불가능함
- Java에서 'final' 키워드로 선언하는 것과 같음


var

- 변경 가능한 참조임. 변경 가능하다는 의미의 'Variable'을 나타냄
- Java의 일반적인 변수에 해당함


변수의 타입추론

- 코틀린은 변수의 타입을 따로 선언 할 필요 없이 알아서 추론이 가능한 언어지만 변수형을 적을수는 있음

ex) var value:int = 10   <-- 이런식으로

- 하지만 코틀린의 타입추론은 컴파일 시점에 타입을 결정하는 정적타입 언어임. 


정적과 동적타입 언어

- 컴파일 시에 타입이 결정되는 '정적타입'언어

- 프로그램 실행(런타임)시에 타입을 결정하는 '동적타입'언어


정적타입 언어는 컴파일 시에 타입 캐스팅 문제를 확인가능하며 실행이 빠르지만 변수의 선언 시 타입을 적어야 하는 불편함이 있음

동적타입 언어는 변수의 타입에 상관없이 코딩하여 작성이 쉽지만 사전에 체크를 하지 않기에 실행 중 타입으로 인한 에러가 발생할 수 있음

코틀린은 자바스크립트나 파이썬 처럼 동적언어처럼 보이지만 정적타입 언어이며 변수의 타입을 '추론'하는 것임!!! 엄연히 다름!!!



코틀린의 함수

- 코틀린의 함수는 자바와 다르게 fun이라는 키워드를 통해서 선언함

ex) fun test() {
	//함수 코드 블럭
}

- 파라미터 또한 자바는 파라미터의 타입을 먼저 선언 후 이름을 지정하는데, 코틀린은 변수 사용과 같이 이름을 먼저 적은 후 타입을 선언함


ex)  fun test(age:int) {
	//함수 코드 블럭
}

- 반환값의 표현도 자바와는 다름. 자바는 반환값이 없으면 void를 있으면 해당하는 자료형을 함수(메소드) 생성 시 선언해야 하지만 코틀린은 반환값이 없다면 적을 필요가 없고, 반환값이 있다면 뒤에 :(콜론)을 통해 표시함

ex) fun test(age:int):int {
	return 0
}

※ 코틀린에는 자바의 void 처럼 쓰이는 Unit 타입이 있는데 반환값이 없는경우 생략이 가능해서 적지않아도 됨.


코틀린의 최상위 함수

- 최상위 함수란 클래스 내부에 있는 함수가 아닌, 클래스 외부에 있는 함수를 뜻함.

- 기존에 자바는 모든 함수가 클래스 내부에 있어야했지만 코틀린은 그럴 필요 X

- 최상위 함수는 같은 패키지의 모든 코드에서 전역적 접근이 가능함

- 최상위 함수는 유틸리티 함수를 선언할 때 아주 유용함



ex) 최상위 함수 사용 예제(클래스 외부에 선언하면 어디서든 바로 사용가능)

package com.moon.kotlinstudy2

import android.widget.Toast

 //코틀린의 최상위 함수, 클래스 외부에 선언하여 패키지의 전역적으로 사용가능
fun toastShort(str:String){
    Toast.makeText(MainApplication.getAppContext(),str,Toast.LENGTH_SHORT).show()
}
fun toastLong(str:String){
    Toast.makeText(MainApplication.getAppContext(),str,Toast.LENGTH_LONG).show()
}
class ToastUtil {
}


※ toastShort("이렇게!")    <-- 어디서든 이렇게 사용 가능!!!





※ 유틸리티 함수란 전역적으로 공통된 유틸리티(Toast 혹은 Bluetooth등등의 기능들을 편하게 사용하기 위해 만든 클래스) 함수.

※ 자바에서 정적 유틸리티 클래스가 코틀린에서 최상위 함수와 같음.


자바에서 정적 유틸리티 클래스의 사용 예제

ex) public class ToastUtil() {
	
	public static void toastShort(String str) {
		Toast.makeText(MainApplication.getAppContext(), str, Toast.LENGHT_SHORT).show();
	}

	public static void toastLong(String str) {
		Toast.makeText(MainApplication.getAppContext(), str, Toast.LENGHT_LONG).show();
	}

}

- ToastUtil.toastShort("이렇게 쓴다");     <-- new를 통해 객체화 필요없이 사용함

- 이런식으로 static 키워드로 함수를 선언해서 new를 통해 클래스를 인스턴스화, 객체로 만들 필요 없이 정적(static)으로 생성된 함수만 사용하는걸 정적 유틸리티 클래스라 함


- 또한 위에서 MainApplication.getAppContext()는 Toast메세지를 사용하려면 Context가 필요하지만 
보통 사용하는  getApplicationContext() 메소드는 Activity 에서 정의된 메소드로 Activity를 상속받지 않으면 사용을 못하기에 Application을 상속받는 클래스를 하나 만들어 전역으로 제공하는 방법을 사용함.


※ 그렇다고 ToastUtil 클래스에 Activity를 상속하면 메세지를 띄울때마다 액티비티가 생성되는 꼴이라 메모리 누수가 심해서 쓰면 안됨


ex) public class MainApplication extends Application {

	private static Context applicationContext;


	public static Context getAppContext(){
		return applicationContext;
	}


	@Override
	pulbic void onCreate(){

	super.onCreate();

	applicationContext = getApplicationContext();
	}
}



- 매니패스트 파일에서 <application>태그 아래에 android:name=".MainApplication" 추가해줌

- 앱에서 사용할 Application 클래스를 지정하는 속성임