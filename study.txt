Toast.makeText(getApplicationContext(), "버튼이 눌렸습니다!!!", Toast.LENGTH_LONG).show();

--> onClick 메서드에서 간단한 메세지를 띄우는 기능

Intent myIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://m.naver.com"));
        startActivity(myIntent);

Intent myIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("tel:010-0000-1111"));
        startActivity(myIntent);

--> 인텐트기능 : 전달한 값을 받아 해당 값에 맞는 동작을 하는 기능(다음에 더 자세한 설명나옴)

공간가중치 (flex라고 생각하면 편함)

android:layout_weight = "?"  <-- 사용법

HTML에서 flex처럼 해당 공간을 ?의 비율로 설정하여 공간을 할당해줌

텍스트 크기 --> 각 단말별 해상도가 다르므로 dp 단위를 사용. 해상도에 비율에 따라 비슷하게 설정되는 장점이 있음

뷰의 위치는 절대값 X --> 과거에 사용되던 방법이지만 지금은 사용하지않음.

XML에서 화면을 구성하지않고 자바코드 상에서 구현가능

--자바코드안에 onCreate()메소드 안에서

LinearLayout mainLayout = new LinearLayout(this);  <-- 리니어레이아웃을 선언해줌
mainLayout.setOrientation(LinearLayout.VERTICAL); <-- 선언한 레이아웃에 방향을 설정해줌

LinearLayout.LayoutParams params = 
		new LinearLayout.LayoutParams(
		LinearLayout.LayoutParams.MATCH_PARENT,
		LinearLayout.LayoutParams.WRAP_CONTENT); <-- 레이아웃안에 추가될 뷰들에 설정할 파라미터 생성

Button btn1 = new Button(this); <-- 버튼 생성
btn1.setText("버튼1"); <-- 버튼에 텍스트 설정
btn1.setLayoutParams(params); <-- 설정한 파라미터를 버튼에 부여
mainLayout.addView(btn1); <-- 버튼을 레이아웃에 추가

setContentView(mainLayout); <-- 레이아웃을 화면에 설정