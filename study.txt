Toast.makeText(getApplicationContext(), "버튼이 눌렸습니다!!!", Toast.LENGTH_LONG).show();

--> onClick 메서드에서 간단한 메세지를 띄우는 기능

Intent myIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://m.naver.com"));
        startActivity(myIntent);

Intent myIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("tel:010-0000-1111"));
        startActivity(myIntent);

--> 인텐트기능 : 전달한 값을 받아 해당 값에 맞는 동작을 하는 기능(다음에 더 자세한 설명나옴)

공간가중치 (flex라고 생각하면 편함)

android:layout_weight = "?"  <-- 사용법

HTML에서 flex처럼 해당 공간을 ?의 비율로 설정하여 공간을 할당해줌

뷰 크기 --> 각 단말별 해상도가 다르므로 dp 단위를 사용. 해상도에 비율에 따라 비슷하게 설정되는 장점이 있음

뷰의 위치는 절대값 X --> 과거에 사용되던 방법이지만 지금은 사용하지않음.

XML에서 화면을 구성하지않고 자바코드 상에서 구현가능

--자바코드안에 onCreate()메소드 안에서

LinearLayout mainLayout = new LinearLayout(this);  <-- 리니어레이아웃을 선언해줌
mainLayout.setOrientation(LinearLayout.VERTICAL); <-- 선언한 레이아웃에 방향을 설정해줌

LinearLayout.LayoutParams params = 
		new LinearLayout.LayoutParams(
		LinearLayout.LayoutParams.MATCH_PARENT,
		LinearLayout.LayoutParams.WRAP_CONTENT); <-- 레이아웃안에 추가될 뷰들에 설정할 파라미터 생성

Button btn1 = new Button(this); <-- 버튼 생성
btn1.setText("버튼1"); <-- 버튼에 텍스트 설정
btn1.setLayoutParams(params); <-- 설정한 파라미터를 버튼에 부여
mainLayout.addView(btn1); <-- 버튼을 레이아웃에 추가

setContentView(mainLayout); <-- 레이아웃을 화면에 설정



--프래그먼트

프래그먼트의 사용목적 --> 분할된 화면들을 독립적으로 구성하기 위해서, 분할된 화면드르이 상태를 관리하기 위해서


--메인 프래그먼트
public class MainFragment extends Fragment {
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        ViewGroup view = (ViewGroup) inflater.inflate(R.layout.main_fragment, container,false);
        Button btn1 = view.findViewById(R.id.main_btn);
        btn1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                MainActivity main = (MainActivity) getActivity();
                main.onChanged(0);
            }
        });
        return view;
    }
}

--메뉴 프래그먼트
public class MenuFragment extends Fragment {
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        ViewGroup view = (ViewGroup) inflater.inflate(R.layout.menu_fragment, container,false);

        Button btn = view.findViewById(R.id.menu_btn);
        btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                MainActivity main = (MainActivity) getActivity();
                main.onChanged(1);
            }
        });
        return view;
    }
}

--메인 액티비티
public class MainActivity extends AppCompatActivity {
    MainFragment main;
    MenuFragment menu;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        main = (MainFragment) getSupportFragmentManager().findFragmentById(R.id.main_f);
        menu = new MenuFragment();
    }
    public void onChanged(int index) {
        if(index == 0) {
            getSupportFragmentManager().beginTransaction().replace(R.id.container, menu).commit();
        } else if(index == 1) {
            getSupportFragmentManager().beginTransaction().replace(R.id.container,main).commit();
        }
    }
}

--메인 프래그먼트 XML
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <TextView
        android:id="@+id/textView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="메인 프래그먼트"
        android:textSize="30dp"
        android:layout_centerInParent="true"
        android:gravity="center"/>

    <Button
        android:id="@+id/main_btn"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerInParent="true"
        android:text="메뉴화면으로"
        android:textSize="30dp" />
</RelativeLayout>

--메뉴 프래그먼트 XML
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <TextView
        android:id="@+id/textView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_centerInParent="true"
        android:gravity="center"
        android:text="메뉴 프래그먼트"
        android:textSize="30dp" />

    <Button
        android:id="@+id/menu_btn"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="메인화면으로"
        android:textSize="30dp"
        android:layout_alignParentBottom="true" />
</RelativeLayout>

--메인액티비티 XML
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:id="@+id/container">

   <fragment
       android:id="@+id/main_f"
       android:layout_width="match_parent"
       android:layout_height="match_parent"
       android:name="moon.fragment_test.MainFragment"/>
</RelativeLayout>


안드로이드 수명주기

새로운 액티비티
onCreate();
onStart();
onResume();
	
	↓

실행
onPause(); 일시중지(다른 액티비티가 상위로 오게된다면 호출)
onResume(); 일시중지된 액티비티가 다시 실행될때 호출

	↓

중지
onStop(); 중지상태로 변경될때 자동으로 호출됨

	↓
실행
onRestart();
onStart();
onResume(); 중지상태에서 다시 실행상태로 변경될때 호출

	↓
소멸
onDestroy();



각각의 상태 메소드

onCreate() 
액티비티가 처음에 만들어졌을때 호출됨
화면에 보이는 뷰들의 일반적인 상태를 설정하는 부분
이전 상태가 저장되어 있는 경우에는 번들 객체를 참조하여 이전 상태 복원가능
이 메소드 다음에는 항상 onStart() 메소드가 호출됨


onStart()
액티비티가 화면에 보이기 바로 전에 호출됨
액티비티가 화면 상에 보이면 이 메소드 다음에 onResume() 메소드가 호출됨
액티비티가 화면에서 가려지게 되면 이 메소드 다음에 onStop() 메소드가 호출됨


onResume()
액티비티가 사용자와 상호작용하기 바로 전에 호출됨


onRestart()
액티비티가 중지된 이후에 호출되는 메소드로 다시 시작되기 바로 전에 호출됨
이 메소드 다음에는 항상 onStart() 메소드가 호출됨


onPause()
또 다른 액티비티를 시작하려고 할때 호출됨
저장되지 않은 데이터를 저장소에 저장하거나 애니메이션 중인 작업을 중지하는 등의 기능을 수행하는 메소드임
이 메소드가 리턴하기 전에는 다음 액티비티가 시작될수 없으므로 이 작업은 매우 빨리 수행된 후 리턴 되어야함
액티비티가 이 상태에 들어가면 시스템은 액티비티를 강제 종료 할 수있음


onStop()
액티비티가 사용자에게 더 이상 보이지 않을 때 호출됨
액티비티가 소멸되거나 또 다른 액티비티가 화면을 가릴 때 호출됨
액티비티가 이 상태에 들어가면 시스템은 액티비티를 강제 종료 할 수있음


onDestroy()
액티비티가 소멸되어 없어지기 전에 호출됨
이 메소드는 액티비티가 받는 마지막 호출이 됨
액티비티가 애플리케이션에 의해 종료되거나(finish() 메소드 호출) 시스템이 강제로 종료시키는 경우에 호출될수 있음
위의 두가지 경우를 구분할때 isFinishing() 메소드를 이용함
액티비티가 이 상태에 들어가면 시스템은 액티비티를 강제 종료 할 수있음